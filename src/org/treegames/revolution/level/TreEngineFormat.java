package org.treegames.revolution.level;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TreEngineFormat {
	private char[] numbers=new char[]{'0','1','2','3','4','5','6','7','8','9'};

	// not needed in the actual game, only used in TreeSDK
	public void write(LevelData l,OutputStream os) {
		try{
			os.write(("// Generated by TreeSDK on "+new SimpleDateFormat("dd/MM/yyyy").format(new Date().getTime())+"\n").getBytes());
			if(!l.properties.isEmpty())
				os.write(("// Properties\n").getBytes());
			for (String s:l.properties.keySet()){
				os.write((s+"="+l.properties.get(s)+"\n").getBytes());
			}
			os.write("\n".getBytes());
			os.write(("// Tiles\n").getBytes());
			for (int y=0;y<l.grid[0].length;y++){
				String output="";
				for (int x=0;x<l.grid.length;x++){
					int id=l.grid[x][y];
					output+=id+",";
				}
				output=output.substring(0,output.length()-1);
				output+="\n";
				os.write(output.getBytes());
			}
			os.flush();
			os.close();
		}catch(FileNotFoundException e){
			e.printStackTrace();
		}catch(IOException e){
			e.printStackTrace();
		}
	}

	public LevelData read(InputStream in) {
		LevelData l=new LevelData();
		Map<String,String> properties=new HashMap<String,String>();
		List<List<Integer>> layout=new ArrayList<List<Integer>>();
		BufferedReader br=new BufferedReader(new InputStreamReader(in));
		String line;
		try{
			while((line=br.readLine())!=null){
				if(line.isEmpty()||line.startsWith("#")||line.startsWith("//")){
					continue;
				}
				if(isNumber(line.charAt(0))){
					// tile
					List<Integer> row=new ArrayList<Integer>();
					String[] values=line.trim().split(",");
					for (String s:values){
						if(!s.isEmpty()){
							int id=Integer.parseInt(s);
							row.add(id);
						}
					}
					layout.add(row);
				}else{
					// property
					String[] s=line.trim().split("=");
					String key=s[0];
					String value=s[1];
					properties.put(key,value);
				}
			}
			l.properties=properties;
			int width=layout.get(0).size();
			int height=layout.size();
			l.grid=new int[width][height];
			for (int x=0;x<width;x++){
				for (int y=0;y<height;y++){
					int id=layout.get(y).get(x);
					l.grid[x][y]=id;
				}
			}
		}catch(IOException e){
			e.printStackTrace();
		}
		return l;
	}

	private boolean isNumber(char c) {
		for (char ch:numbers){
			if(c==ch){
				return true;
			}
		}
		return false;
	}
}